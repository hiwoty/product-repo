#%RAML 1.0
title: product-retail-api
version: v1
description: this api processes product retail
baseUri: http://localhost:8081/retail-api/v1
uses:
   product:  datatypes/product.raml  
   bill: datatypes/bill.raml
   productcategory: datatypes/product-category.raml
  
    
/products:
  get:
    description: fetches list of all product data
    responses:
      200:
        body:
          application/json:
            example: !include examples/product/product-array.json      
      500:
        body:
          application/json:
            type: product.Bad-request-response-type
            example: !include /examples/product/internal-server-error.json                    
  post:
    description: Creates a new product based on request JSON
    
    body:
      application/json:
        type: product.create-product-request
        example: !include /examples/product/create-product-request.json 
         
    responses:
      201:
        body:
          application/json:
            type : product.create-product-response-type
            example: !include /examples/product/create-product-response.json
      400:
        body:
          application/json:
            type: product.Bad-request-response-type
            example: !include /examples/product/bad-request.json    
                
      500:
        body:
          application/json:
            type: product.Internal-server-error-response-type
            example: !include /examples/product/internal-server-error.json
                
  /id:
    description: fetch a specific product with id  
    get:
     queryParameters:
      id:
        displayName: id
        required: true
        type: integer
    
     responses:
      200:
        body:
          application/json:
            example: !include /examples/product/create-product-response.json
              

 
    put:
      description: Updates product data based on request JSON
      queryParameters:
       id:
        displayName: productId
        required: true
        type: integer
      body:
       application/json:
        type: product.create-product-request
        example: !include /examples/product/create-product-request.json
          
      responses:
       200:
        body:
          application/json:
            example: !include /examples/product/update-product.json 
              
       404:
        body:
          application/json:
            example: !include /examples/product/product-not-found.json
             
       500:
        body:
          application/json:
            example: !include /examples/product/internal-server-error.json
              
    delete:
     description: Delete an existing product if it is not associated with a bill.
     queryParameters:
       id:
        displayName: productId
        required: true
        type: integer
     responses:
      200:
        body:
          application/json:
           example:
             { "status": 200, "message": "resource deleted successfully"}
      400:
        body:
          application/json:
           example:
             { "status": 400, "message": "bad request"}        
/bills:
  get:
    description: fetches list of all product data
    responses:
      200:
        body:
          application/json:
            type: bill.create-bill
            example: !include /examples/bill/bill-request.json
              
      500:
        body:
          application/json:
            example: !include /examples/bill/bill-request.json
              
  post:
    description: Creates a new product based on request JSON 
    body:
      application/json:
        example: !include /examples/bill/bill-request.json
          
    responses:
      201:
        body:
          application/json:
            example:
              { "status" : 201, "message" : "bill created" }
      500:
        body:
          application/json:
            example: !include /examples/bill/internal-server-error.json         

  /id:
    description: fetch a specific bill with id
    get:
     queryParameters:
      id:
        displayName: productId
        required: true
        type: integer
     responses:
      200:
        body:
          application/json:
            example: !include /examples/bill/bill-response.json
               
    put:
      description: Updates bill data based on request JSON
      queryParameters:
       id:
        displayName: productId
        required: true
        type: integer
      body:
       application/json:
        example: !include /examples/bill/bill-request.json
      responses:
       200:
        body:
          application/json:
            example:
              { "status" : 200, "message" : "resource updated successfully" }
       404:
          body:
           application/json:
            example: !include /examples/bill/bill-not-found.json
       500:
        body:
          application/json:
            example: !include /examples/bill/internal-server-error.json
    delete:
     description: Delete an existing product if it is not associated with a bill.
     queryParameters:
       id:
        displayName: productId
        required: true
        type: integer
     responses:
      200:
        body:
          application/json:
           example:
             { "status": 200, "message": "resource deleted successfully"}
      400:
        body:
          application/json:
           example:
             { "status": 400, "message": "resource deleted successfully"}        
/productCategories:
  get:
    description: fetches list of all product data
    responses:
      200:
        body:
          application/json:
            type: productcategory.product-category[]
            example: !include /examples/product-category/product-catagory-request.json
      500:
        body:
          application/json:
            example: !include /examples/product-category/internal-server-error.json
                      
  post:
    description: Creates a new product based on request JSON 
    body:
      application/json:
        example:
           { "id": 1001, "name": "electronics" }
    responses:
      201:
        body:
          application/json:
            example:
              { "status" : 201, "message" : "product catagory created" }
      500:
        body:
          application/json:
            example:
              { "status" :500, "message" : "Internal server error" }  
  /id:
    get:
      description: fetch a specific productcatagory
      queryParameters:
        id:
          displayName: id
          type: integer
          required: true
      responses:
        200:
          body:
            application/json:
              example:
                {"productCategory": "eletronics"}
        404:
          body:
            application/json:
              example:
                 { "status": 404, "message" : " product category not found" }
        
    put:
      description: Updates productcatagory data based on request JSON
      queryParameters:
       id:
        displayName: productId
        required: true
        type: integer
      body:
       application/json:
        example:
          { "productCategory": "beverages" }
      responses:
       200:
        body:
          application/json:
            example:
              { "status" : 200, "message" : "resource updated successfully" }
       404:
        body:
          application/json:
            example:
              { "status" :404, "message" : "resource does not exist" }
       500:
        body:
          application/json:
            example:
              { "status" :500, "message" : "internal serve error" }
    delete:
      description: Delete an existing product category.
      queryParameters:
       id:
        displayName: id
        required: true
        type: integer
      responses:
       200:
        body:
          application/json:
           example:
             { "status": 200, "message": "product catagory deleted successfully"}
       400:
        body:
          application/json:
           example:
             { "status": 400, "message": "bad request"}   

                
              
                    
              
            
             
         


      
 




          
          
      
    
  